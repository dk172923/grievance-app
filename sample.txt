-- Create enums
CREATE TYPE grievance_language AS ENUM ('English', 'Tamil');
CREATE TYPE grievance_status AS ENUM ('Pending', 'In Progress', 'Resolved', 'Closed');
CREATE TYPE grievance_priority AS ENUM ('Low', 'Medium', 'High');
CREATE TYPE user_role AS ENUM ('user', 'employee', 'admin');
CREATE TYPE designation_type AS ENUM ('Lead', 'Senior', 'Junior');

-- Create profiles table
CREATE TABLE profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT NOT NULL,
  name TEXT NOT NULL,
  role user_role NOT NULL DEFAULT 'user',
  category_id INTEGER REFERENCES categories(id) ON DELETE SET NULL, -- Department
  designation designation_type, -- Employee designation
  location TEXT, -- Employee location
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create categories table
CREATE TABLE categories (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create grievances table
CREATE TABLE grievances (
  id SERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  language grievance_language NOT NULL DEFAULT 'English',
  category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE RESTRICT,
  location TEXT NOT NULL,
  priority grievance_priority NOT NULL DEFAULT 'Medium',
  status grievance_status NOT NULL DEFAULT 'Pending',
  file_url TEXT,
  assigned_employee_id UUID REFERENCES auth.users(id) ON DELETE SET NULL, -- Assigned employee
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create department_hierarchy table
CREATE TABLE department_hierarchy (
  id SERIAL PRIMARY KEY,
  category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
  employee_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  parent_employee_id UUID REFERENCES auth.users(id) ON DELETE SET NULL, -- Reports to
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create grievance_delegations table
CREATE TABLE grievance_delegations (
  id SERIAL PRIMARY KEY,
  grievance_id INTEGER NOT NULL REFERENCES grievances(id) ON DELETE CASCADE,
  from_employee_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  to_employee_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  delegated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE grievances ENABLE ROW LEVEL SECURITY;
ALTER TABLE department_hierarchy ENABLE ROW LEVEL SECURITY;
ALTER TABLE grievance_delegations ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view their profile" ON profiles
  FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can insert their profile" ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "All can view categories" ON categories
  FOR SELECT USING (true);
CREATE POLICY "Admins can manage categories" ON categories
  FOR ALL USING (EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin'
  ));

CREATE POLICY "Users can submit grievances" ON grievances
  FOR INSERT WITH CHECK (auth.uid() = user_id OR user_id IS NULL);
CREATE POLICY "Users can view their grievances" ON grievances
  FOR SELECT USING (auth.uid() = user_id OR user_id IS NULL);
CREATE POLICY "Employees can view grievances in their department" ON grievances
  FOR SELECT USING (EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'employee' AND category_id = grievances.category_id
  ));
CREATE POLICY "Employees can update grievances they are assigned" ON grievances
  FOR UPDATE USING (auth.uid() = assigned_employee_id);
CREATE POLICY "Admins can manage grievances" ON grievances
  FOR ALL USING (EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin'
  ));

CREATE POLICY "Employees can view their department hierarchy" ON department_hierarchy
  FOR SELECT USING (EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'employee' AND category_id = department_hierarchy.category_id
  ));
CREATE POLICY "Admins can manage hierarchy" ON department_hierarchy
  FOR ALL USING (EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin'
  ));

CREATE POLICY "All can view delegation history" ON grievance_delegations
  FOR SELECT USING (true);
CREATE POLICY "Employees can delegate grievances" ON grievance_delegations
  FOR INSERT WITH CHECK (auth.uid() = from_employee_id);

-- Create storage bucket for grievance files
INSERT INTO storage.buckets (id, name, public) VALUES ('grievance-files', 'grievance-files', true);

-- Storage RLS Policy
CREATE POLICY "Users can upload files" ON storage.objects
  FOR INSERT WITH CHECK (bucket_id = 'grievance-files' AND auth.uid() IS NOT NULL);
CREATE POLICY "All can view public files" ON storage.objects
  FOR SELECT USING (bucket_id = 'grievance-files');



















  -- Insert employees into auth.users (manually create in Supabase Auth or use API)
-- Example UUIDs for demonstration (replace with actual auth.users IDs)
INSERT INTO profiles (id, email, name, role, category_id, designation, location) VALUES
  ('11111111-1111-1111-1111-111111111111', 'john.doe@example.com', 'John Doe', 'employee', 1, 'Lead', 'New York'),
  ('22222222-2222-2222-2222-222222222222', 'jane.smith@example.com', 'Jane Smith', 'employee', 1, 'Senior', 'New York'),
  ('33333333-3333-3333-3333-333333333333', 'bob.jones@example.com', 'Bob Jones', 'employee', 1, 'Junior', 'Boston'),
  ('44444444-4444-4444-4444-444444444444', 'alice.brown@example.com', 'Alice Brown', 'employee', 1, 'Junior', 'Boston')
ON CONFLICT (id) DO UPDATE SET
  email = EXCLUDED.email,
  name = EXCLUDED.name,
  role = EXCLUDED.role,
  category_id = EXCLUDED.category_id,
  designation = EXCLUDED.designation,
  location = EXCLUDED.location;

-- Insert department hierarchy for Workplace Safety (category_id: 1)
INSERT INTO department_hierarchy (category_id, employee_id, parent_employee_id) VALUES
  (1, '11111111-1111-1111-1111-111111111111', NULL), -- John Doe (Lead, no parent)
  (1, '22222222-2222-2222-2222-222222222222', '11111111-1111-1111-1111-111111111111'), -- Jane reports to John
  (1, '33333333-3333-3333-3333-333333333333', '22222222-2222-2222-2222-222222222222'), -- Bob reports to Jane
  (1, '44444444-4444-4444-4444-444444444444', '22222222-2222-2222-2222-222222222222') -- Alice reports to Jane
ON CONFLICT DO NOTHING;